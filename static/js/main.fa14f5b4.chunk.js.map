{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","caculateOperations","result","state","operations","join","math","eval","format","precision","String","setState","handleClick","e","value","target","getAttribute","error","concat","toConsumableArray","react_default","a","createElement","className","id","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa14f5b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport math from \"mathjs\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      operations: []\n    };\n  }\n  caculateOperations = () => {\n    let result = this.state.operations.join(\"\");\n    result = math.eval(result);\n    result = math.format(result, { precision: 4 });\n    result = String(result);\n    this.setState({\n      operations: [result]\n    });\n  };\n  handleClick = e => {\n    const value = e.target.getAttribute(\"value\");\n    switch (value) {\n      case \"clear\":\n        this.setState({\n          operations: []\n        });\n        break;\n      case \"equals\":\n        try {\n          this.caculateOperations();\n        } catch (error) {\n          this.setState({\n            operations: []\n          });\n        }\n\n        break;\n      default:\n        this.setState({\n          operations: [...this.state.operations, value]\n        });\n        break;\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"display\">\n          <p>{this.state.operations}</p>\n        </div>\n        <div id=\"buttons\">\n          {/* FIRST COLUMN */}\n          <div onClick={this.handleClick} id=\"clear\" value=\"clear\">\n            C\n          </div>\n          <div onClick={this.handleClick} id=\"seven\" value=\"7\">\n            7\n          </div>\n          <div onClick={this.handleClick} id=\"four\" value=\"4\">\n            4\n          </div>\n          <div onClick={this.handleClick} id=\"one\" value=\"1\">\n            1\n          </div>\n          <div onClick={this.handleClick} id=\"zero\" value=\"0\">\n            0\n          </div>\n\n          {/* SECOND COLUMN */}\n          <div onClick={this.handleClick} id=\"divide\" value=\"/\">\n            /\n          </div>\n          <div onClick={this.handleClick} id=\"eight\" value=\"8\">\n            8\n          </div>\n          <div onClick={this.handleClick} id=\"five\" value=\"5\">\n            5\n          </div>\n          <div onClick={this.handleClick} id=\"two\" value=\"2\">\n            2\n          </div>\n          <div onClick={this.handleClick} id=\"decimal\" value=\".\">\n            .\n          </div>\n\n          {/* THIRD COLUMN */}\n          <div onClick={this.handleClick} id=\"multiply\" value=\"*\">\n            x\n          </div>\n          <div onClick={this.handleClick} id=\"nine\" value=\"9\">\n            9\n          </div>\n          <div onClick={this.handleClick} id=\"six\" value=\"6\">\n            6\n          </div>\n          <div onClick={this.handleClick} id=\"three\" value=\"3\">\n            3\n          </div>\n          <div onClick={this.handleClick} id=\"null\" value=\"\" />\n\n          {/* FORTH COLUMN */}\n          <div onClick={this.handleClick} id=\"subtract\" value=\"-\">\n            -\n          </div>\n          <div onClick={this.handleClick} id=\"add\" value=\"+\">\n            +\n          </div>\n          <div onClick={this.handleClick} id=\"equals\" value=\"equals\">\n            =\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}